// Code generated by ent, DO NOT EDIT.

package car

import (
	"rent-a-car/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldID, id))
}

// CarName applies equality check predicate on the "car_name" field. It's identical to CarNameEQ.
func CarName(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldCarName, v))
}

// MilesPerGallon applies equality check predicate on the "miles_per_gallon" field. It's identical to MilesPerGallonEQ.
func MilesPerGallon(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldMilesPerGallon, v))
}

// Cylinders applies equality check predicate on the "cylinders" field. It's identical to CylindersEQ.
func Cylinders(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldCylinders, v))
}

// Power applies equality check predicate on the "power" field. It's identical to PowerEQ.
func Power(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldPower, v))
}

// Year applies equality check predicate on the "year" field. It's identical to YearEQ.
func Year(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldYear, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldUpdatedAt, v))
}

// CarNameEQ applies the EQ predicate on the "car_name" field.
func CarNameEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldCarName, v))
}

// CarNameNEQ applies the NEQ predicate on the "car_name" field.
func CarNameNEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldCarName, v))
}

// CarNameIn applies the In predicate on the "car_name" field.
func CarNameIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldCarName, vs...))
}

// CarNameNotIn applies the NotIn predicate on the "car_name" field.
func CarNameNotIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldCarName, vs...))
}

// CarNameGT applies the GT predicate on the "car_name" field.
func CarNameGT(v string) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldCarName, v))
}

// CarNameGTE applies the GTE predicate on the "car_name" field.
func CarNameGTE(v string) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldCarName, v))
}

// CarNameLT applies the LT predicate on the "car_name" field.
func CarNameLT(v string) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldCarName, v))
}

// CarNameLTE applies the LTE predicate on the "car_name" field.
func CarNameLTE(v string) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldCarName, v))
}

// CarNameContains applies the Contains predicate on the "car_name" field.
func CarNameContains(v string) predicate.Car {
	return predicate.Car(sql.FieldContains(FieldCarName, v))
}

// CarNameHasPrefix applies the HasPrefix predicate on the "car_name" field.
func CarNameHasPrefix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasPrefix(FieldCarName, v))
}

// CarNameHasSuffix applies the HasSuffix predicate on the "car_name" field.
func CarNameHasSuffix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasSuffix(FieldCarName, v))
}

// CarNameEqualFold applies the EqualFold predicate on the "car_name" field.
func CarNameEqualFold(v string) predicate.Car {
	return predicate.Car(sql.FieldEqualFold(FieldCarName, v))
}

// CarNameContainsFold applies the ContainsFold predicate on the "car_name" field.
func CarNameContainsFold(v string) predicate.Car {
	return predicate.Car(sql.FieldContainsFold(FieldCarName, v))
}

// MilesPerGallonEQ applies the EQ predicate on the "miles_per_gallon" field.
func MilesPerGallonEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldMilesPerGallon, v))
}

// MilesPerGallonNEQ applies the NEQ predicate on the "miles_per_gallon" field.
func MilesPerGallonNEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldMilesPerGallon, v))
}

// MilesPerGallonIn applies the In predicate on the "miles_per_gallon" field.
func MilesPerGallonIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldMilesPerGallon, vs...))
}

// MilesPerGallonNotIn applies the NotIn predicate on the "miles_per_gallon" field.
func MilesPerGallonNotIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldMilesPerGallon, vs...))
}

// MilesPerGallonGT applies the GT predicate on the "miles_per_gallon" field.
func MilesPerGallonGT(v string) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldMilesPerGallon, v))
}

// MilesPerGallonGTE applies the GTE predicate on the "miles_per_gallon" field.
func MilesPerGallonGTE(v string) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldMilesPerGallon, v))
}

// MilesPerGallonLT applies the LT predicate on the "miles_per_gallon" field.
func MilesPerGallonLT(v string) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldMilesPerGallon, v))
}

// MilesPerGallonLTE applies the LTE predicate on the "miles_per_gallon" field.
func MilesPerGallonLTE(v string) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldMilesPerGallon, v))
}

// MilesPerGallonContains applies the Contains predicate on the "miles_per_gallon" field.
func MilesPerGallonContains(v string) predicate.Car {
	return predicate.Car(sql.FieldContains(FieldMilesPerGallon, v))
}

// MilesPerGallonHasPrefix applies the HasPrefix predicate on the "miles_per_gallon" field.
func MilesPerGallonHasPrefix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasPrefix(FieldMilesPerGallon, v))
}

// MilesPerGallonHasSuffix applies the HasSuffix predicate on the "miles_per_gallon" field.
func MilesPerGallonHasSuffix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasSuffix(FieldMilesPerGallon, v))
}

// MilesPerGallonEqualFold applies the EqualFold predicate on the "miles_per_gallon" field.
func MilesPerGallonEqualFold(v string) predicate.Car {
	return predicate.Car(sql.FieldEqualFold(FieldMilesPerGallon, v))
}

// MilesPerGallonContainsFold applies the ContainsFold predicate on the "miles_per_gallon" field.
func MilesPerGallonContainsFold(v string) predicate.Car {
	return predicate.Car(sql.FieldContainsFold(FieldMilesPerGallon, v))
}

// CylindersEQ applies the EQ predicate on the "cylinders" field.
func CylindersEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldCylinders, v))
}

// CylindersNEQ applies the NEQ predicate on the "cylinders" field.
func CylindersNEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldCylinders, v))
}

// CylindersIn applies the In predicate on the "cylinders" field.
func CylindersIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldCylinders, vs...))
}

// CylindersNotIn applies the NotIn predicate on the "cylinders" field.
func CylindersNotIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldCylinders, vs...))
}

// CylindersGT applies the GT predicate on the "cylinders" field.
func CylindersGT(v string) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldCylinders, v))
}

// CylindersGTE applies the GTE predicate on the "cylinders" field.
func CylindersGTE(v string) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldCylinders, v))
}

// CylindersLT applies the LT predicate on the "cylinders" field.
func CylindersLT(v string) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldCylinders, v))
}

// CylindersLTE applies the LTE predicate on the "cylinders" field.
func CylindersLTE(v string) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldCylinders, v))
}

// CylindersContains applies the Contains predicate on the "cylinders" field.
func CylindersContains(v string) predicate.Car {
	return predicate.Car(sql.FieldContains(FieldCylinders, v))
}

// CylindersHasPrefix applies the HasPrefix predicate on the "cylinders" field.
func CylindersHasPrefix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasPrefix(FieldCylinders, v))
}

// CylindersHasSuffix applies the HasSuffix predicate on the "cylinders" field.
func CylindersHasSuffix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasSuffix(FieldCylinders, v))
}

// CylindersEqualFold applies the EqualFold predicate on the "cylinders" field.
func CylindersEqualFold(v string) predicate.Car {
	return predicate.Car(sql.FieldEqualFold(FieldCylinders, v))
}

// CylindersContainsFold applies the ContainsFold predicate on the "cylinders" field.
func CylindersContainsFold(v string) predicate.Car {
	return predicate.Car(sql.FieldContainsFold(FieldCylinders, v))
}

// PowerEQ applies the EQ predicate on the "power" field.
func PowerEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldPower, v))
}

// PowerNEQ applies the NEQ predicate on the "power" field.
func PowerNEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldPower, v))
}

// PowerIn applies the In predicate on the "power" field.
func PowerIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldPower, vs...))
}

// PowerNotIn applies the NotIn predicate on the "power" field.
func PowerNotIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldPower, vs...))
}

// PowerGT applies the GT predicate on the "power" field.
func PowerGT(v string) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldPower, v))
}

// PowerGTE applies the GTE predicate on the "power" field.
func PowerGTE(v string) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldPower, v))
}

// PowerLT applies the LT predicate on the "power" field.
func PowerLT(v string) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldPower, v))
}

// PowerLTE applies the LTE predicate on the "power" field.
func PowerLTE(v string) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldPower, v))
}

// PowerContains applies the Contains predicate on the "power" field.
func PowerContains(v string) predicate.Car {
	return predicate.Car(sql.FieldContains(FieldPower, v))
}

// PowerHasPrefix applies the HasPrefix predicate on the "power" field.
func PowerHasPrefix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasPrefix(FieldPower, v))
}

// PowerHasSuffix applies the HasSuffix predicate on the "power" field.
func PowerHasSuffix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasSuffix(FieldPower, v))
}

// PowerEqualFold applies the EqualFold predicate on the "power" field.
func PowerEqualFold(v string) predicate.Car {
	return predicate.Car(sql.FieldEqualFold(FieldPower, v))
}

// PowerContainsFold applies the ContainsFold predicate on the "power" field.
func PowerContainsFold(v string) predicate.Car {
	return predicate.Car(sql.FieldContainsFold(FieldPower, v))
}

// YearEQ applies the EQ predicate on the "year" field.
func YearEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldYear, v))
}

// YearNEQ applies the NEQ predicate on the "year" field.
func YearNEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldYear, v))
}

// YearIn applies the In predicate on the "year" field.
func YearIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldYear, vs...))
}

// YearNotIn applies the NotIn predicate on the "year" field.
func YearNotIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldYear, vs...))
}

// YearGT applies the GT predicate on the "year" field.
func YearGT(v string) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldYear, v))
}

// YearGTE applies the GTE predicate on the "year" field.
func YearGTE(v string) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldYear, v))
}

// YearLT applies the LT predicate on the "year" field.
func YearLT(v string) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldYear, v))
}

// YearLTE applies the LTE predicate on the "year" field.
func YearLTE(v string) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldYear, v))
}

// YearContains applies the Contains predicate on the "year" field.
func YearContains(v string) predicate.Car {
	return predicate.Car(sql.FieldContains(FieldYear, v))
}

// YearHasPrefix applies the HasPrefix predicate on the "year" field.
func YearHasPrefix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasPrefix(FieldYear, v))
}

// YearHasSuffix applies the HasSuffix predicate on the "year" field.
func YearHasSuffix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasSuffix(FieldYear, v))
}

// YearEqualFold applies the EqualFold predicate on the "year" field.
func YearEqualFold(v string) predicate.Car {
	return predicate.Car(sql.FieldEqualFold(FieldYear, v))
}

// YearContainsFold applies the ContainsFold predicate on the "year" field.
func YearContainsFold(v string) predicate.Car {
	return predicate.Car(sql.FieldContainsFold(FieldYear, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Car) predicate.Car {
	return predicate.Car(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Car) predicate.Car {
	return predicate.Car(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Car) predicate.Car {
	return predicate.Car(sql.NotPredicates(p))
}
